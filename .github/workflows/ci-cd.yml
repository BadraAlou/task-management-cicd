name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Permissions n√©cessaires pour GitHub Actions
permissions:
  contents: write    # Pour pousser les changements
  packages: write    # Pour pousser vers GHCR
  actions: read      # Pour lire les workflows

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: badraalou/task-management-cicd

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_tastmanagement
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django coverage
        
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_tastmanagement
      run: |
        cd tastmanagement
        python manage.py test
        
    - name: Run coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_tastmanagement
      run: |
        cd tastmanagement
        coverage run --source='.' manage.py test
        coverage report

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Trigger Kubernetes Rollout
      run: |
        echo "‚úÖ Docker image pushed to registry with latest tag"
        echo "‚úÖ Kubernetes deployment configured with imagePullPolicy: Always"
        echo "üöÄ Image build completed successfully!"
        echo ""
        echo "Build completed at: $(date)"
        echo "Commit SHA: ${{ github.sha }}"
        echo ""
        echo "üìù Next steps for deployment:"
        echo "1. Run: ./scripts/auto-deploy.sh (for immediate deployment)"
        echo "2. Or use: kubectl rollout restart deployment/tastmanagement-app -n tastmanagement"
        echo "3. Or wait for ArgoCD sync (if configured)"
        echo ""
        echo "üí° The deployment will automatically pull the latest image thanks to imagePullPolicy: Always"
